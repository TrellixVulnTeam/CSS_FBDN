.row {
    max-width: $grid-width;
    margin: 0 auto;/*da to doprostred element v elementu*/
    /*top/bottom 0
    left/right auto => na strance se margin automaticky dopocita. Jestli ze bude na obou stranach stejny, element se zarovna do prostred*/
    
    /*tez by slo*/
    /*margin-bottom: $gutter-vertical;
    &:last-child{
        margin-bottom: 0px;
    }*/
    &:not(:last-child) {/*vybrali jsme vsechno krome posledniho elementu. je to delano kvuli margin na konci*/
       margin-bottom: $gutter-vertical;
       @include respond(tab-port){
            margin-bottom: $gutter-vertical-small;
        }
    }
    @include respond(tab-port){
        max-width: 50rem;
        padding: 0 3rem;
    }

    @include clearfix;

    [class^="col-"]{/*vybere vsechny elementy, kterych trida zacina na col-*/
        /*^ vse co zacina*/
        /* * vse co obsahuje*/
        /*$ vse co konci*/
        display: inline-block;
        float: left; /*float = obtekani; float:left - prvek bude obtekat content zleva; musi byt nastavena width*/
        &:not(:last-child){
            margin-right: $gutter-horizontal;
            @include respond(tab-port){
                margin-right: 0;
                margin-bottom: $gutter-vertical-small;
            }
        }

        @include respond(tab-port){
            width: 100% !important;
        }
    }

    .col-1-of-2{
        width: calc((100% - #{$gutter-horizontal}) / 2); /*v calc musime pouzit # {$nazev_promene}*/
    }

    .col-1-of-3 {
        width: calc((100% - 2*#{$gutter-horizontal})/3);
    }

    .col-2-of-3 {
        width: calc(2*(100% - 2*#{$gutter-horizontal})/3 + #{$gutter-horizontal});
    }

    .col-1-of-4 {
        width: calc((100% - 3*#{$gutter-horizontal})/4);
    }

    .col-2-of-4 {
        width: calc(2*(100% - 3*#{$gutter-horizontal})/4 + #{$gutter-horizontal});
    }

    .col-3-of-4 {
        width: calc(3*(100% - 3*#{$gutter-horizontal})/4 + 2*#{$gutter-horizontal});
    }
}